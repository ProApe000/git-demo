测试git rm --cache filename
git add --patch 对修改选择性的分批提交
git rebase --interactive some_once_commit 可以将多个提交压缩成一个提交
git rebase -i [base_commit] 在变基的过程中 你可以执行add commit操作(编辑模式)
git reset --merge ORIG_HEAD ORIG_HEAD记录一次危险的提交前的commit --merge 危险指定为merge 一般用于合并后回退到合并前的提交
git checkout some_once_commit 切换本分支上某次提交
git cheery-pick 565917e..1fb0ac6 经试验 为闭合区间啊 将[565917e,1fb0ac6]提交(不同分支)merge过来 
git cherry-pick [commit1] [commit2] 挑选多个提交对象
git branch -a 查看所有的分支 本地和远程分支
git branch -r 查看所有的远程分支
git branch --oneline 以简短信息的方式列出近期的提交历史记录
git fetch 获取更新的分支列表和所有远程分支的内容
git push [远程仓库名] --delete [远程分支名]
git tag [标签名称] [某次提交]  给某次提交打标签
git tag  列出所有标签
git show [标签名] 显示打上标签名的某次提交的具体信息
git checkout --filename 舍弃工作目录中对一个文件的修改 修改的工作未被暂存
git reset     舍弃工作目录中所有未保存的修改 文件已经暂存 但是没有被提交
git commit --amend  更改最近一次提交的提交信息
git merge-base [commit1] [commit2] 两个提交的LCA 合并时需要进行三路对比
git merge-base --all 找出所有的best ancestor
撤销共享分支中的合并 6.6.2
想要还原的提交是连续的 revert命令可以接受单个提交 或是一系列提交
git revert --no-commit [commit1]..[commit2] (commit1,commit2] 
快进式合并比较繁琐 所以建议在每次merge的时候 使用非快进式合 git merge --no-ff 参数

使用包含--contains参数的branch命令来查看包含某个提交的所有分支
git branch --contains [commit]

git push -u [branch]:[remote_branch] 将推送到和本地分支名称不一样的远程分支

git log 命令 参考：https://blog.csdn.net/qq_32452623/article/details/79599503
按照作者或者是提交者查找
git log --author=<pattern> 
git log --committer=<pattern>

关于时间检索
查找某个时间点之后
git log --since=<date>
git log --after=<date>

查找某个时间点之前
git log --before=<date>
git log --until=<date>

组合查找
git log --since="2018.03.12" --until="2018.03.18"

按照提交信息查找
git log --grep=<info>

按照修改的某个查找
git log [filePath]

按照修改内容查找

查看某个字符串的变动历史提交
git log -S<string>
查看某符合某一个正则表达式内容的变动历史提交  
git log -G<regex>

git log -S"喜欢你" --oneine

查看合并提交
git log --merges

查看非合并提交
git log --no-merges

查看发生合并冲突的文件
git log --merge
